class SSHData::PublicKey::DSA < SSHData::PublicKey::Base
  attr_reader :p, :q, :g, :y

  # Convert an SSH encoded DSA signature to DER encoding for verification with
  # OpenSSL.
  #
  # sig - A binary String signature from an SSH packet.
  #
  # Returns a binary String signature, as expected by OpenSSL.
  def self.openssl_signature(sig)
    if sig.bytesize != 40
      raise SSHData::DecodeError, "bad DSA signature size"
    end

    r = OpenSSL::BN.new(sig.byteslice(0, 20), 2)
    s = OpenSSL::BN.new(sig.byteslice(20, 20), 2)

    OpenSSL::ASN1::Sequence.new([
      OpenSSL::ASN1::Integer.new(r),
      OpenSSL::ASN1::Integer.new(s)
    ]).to_der
  end

  # Convert an DER encoded DSA signature, as generated by OpenSSL to SSH
  # encoding.
  #
  # sig - A binary String signature, as generated by OpenSSL.
  #
  # Returns a binary String signature, as found in an SSH packet.
  def self.ssh_signature(sig)
    a1 = OpenSSL::ASN1.decode(sig)
    if a1.tag_class != :UNIVERSAL || a1.tag != OpenSSL::ASN1::SEQUENCE || a1.value.count != 2
      raise SSHData::DecodeError, "bad asn1 signature"
    end

    r, s = a1.value
    if r.tag_class != :UNIVERSAL || r.tag != OpenSSL::ASN1::INTEGER || s.tag_class != :UNIVERSAL || s.tag != OpenSSL::ASN1::INTEGER
      raise SSHData::DecodeError, "bad asn1 signature"
    end

    [r.value.to_s(2), s.value.to_s(2)].pack("a20a20")
  end

  def initialize(p:, q:, g:, y:)
    @p = p
    @q = q
    @g = g
    @y = y
  end

  # The public key represented as an OpenSSL object.
  #
  # Returns an OpenSSL::PKey::PKey instance.
  def openssl
    @openssl ||= OpenSSL::PKey::DSA.new(asn1.to_der)
  end

  def verify(signed_data, signature)
    sig_algo, ssh_sig, _ = SSHData::Encoding.decode_signature(signature)
    if sig_algo != SSHData::PublicKey::ALGO_DSA
      raise SSHData::DecodeError, "bad signature algorithm: #{sig_algo.inspect}"
    end

    openssl_sig = self.class.openssl_signature(ssh_sig)
    openssl.verify(OpenSSL::Digest::SHA1.new, openssl_sig, signed_data)
  end

  private

  def asn1
    OpenSSL::ASN1::Sequence.new([
      OpenSSL::ASN1::Sequence.new([
        OpenSSL::ASN1::ObjectId.new("DSA"),
        OpenSSL::ASN1::Sequence.new([
          OpenSSL::ASN1::Integer.new(p),
          OpenSSL::ASN1::Integer.new(q),
          OpenSSL::ASN1::Integer.new(g),
        ]),
      ]),
      OpenSSL::ASN1::BitString.new(OpenSSL::ASN1::Integer.new(y).to_der),
    ])
  end
end
